#!/usr/bin/env python

import sys
import os
import subprocess
import time
import datetime
from time import strftime, gmtime
import pickle

import Adafruit_GPIO.SPI as SPI
import Adafruit_MCP3008 

# This is for flatenning nested lists
import itertools

# Software SPI configuration

CLK = 18
MISO = 23
MOSI = 24
CS = 25

mcp = Adafruit_MCP3008.MCP3008(clk=CLK, miso=MISO, mosi=MOSI, cs=CS)

# Hardware SPI config

# SPI_PORT = 0
# SPI_DEVICE = 0

# mcp = Adafruit_MCP3008.MCP3008(spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE))

FREQUENCY_SECONDS   = 30 
# now that there is a file per sensor we'll need to break that up and write a procedure that will write to many files...
TEMP_LOG = os.path.abspath("../sensor_logs/temp.dat")
LIGHT_LOG = os.path.abspath("../sensor_logs/light.dat")
SOIL_MOISTURE_LOG = os.path.abspath("../sensor_logs/soil_moisture.dat")
HUMIDITY_LOG = os.path.abspath("../sensor_logs/humidity.dat")
BATTERY_STATE_LOG = os.path.abspath("../sensor_logs/battery_state.dat")

# define ADC


# define TPM time

time_stamp = strftime("%d, %Y, %H:%M:%S", gmtime())

# read data from sensors and pack them into args variable.
# Adding more sensors can be defined here
# In case there is more temperature sensors we should be able to pack them into a tuple like that:
# then again, a few of the 1-wire temp sensors can use one input so we may have to look into that again

temp0 = mcp.read_adc(1)         # here we should also replace number with a
temp1 = mcp.read_adc(2)         # variable that defines number of temperature sensors
temp2 = mcp.read_adc(3)
temp3 = mcp.read_adc(4)

temp = (temp0, temp1, temp2, temp3)

# In the same way we should be able to split up other inputs

humidity = mcp.read_adc(5)
light = mcp.read_adc(6)
soil_moist = mcp.read_adc(7)
sens_data = (temp[0:3], humidity, light, soil_moist)

# version with log file broken up into files for different sensors. not as neat as one file, is there benefit? 
# like, if some sensors barf, would that not disturb data set in one file?
    
while True:
    values = [0]*4          # here we should have a variable refering to a number
                            # of temperature sensors
    for i in range(4):
        values[i] = mcp.read_adc(i)
        v_set = float(values[i])
        with open("TEMP_LOG", "a") as f:
            pickle.dump(values, f)
            print('Wrote a set of data to {0}'.format(TEMP_LOG))
    break

v_set = float(mpc.read_adc(5))
with open("")
# finish above, logs to separate files for separate sensors

print('| {0:>4} | {1:>4} | {2:>4} | {3:>4} | {4:>4} | {5:>4} | {6:>4} | {7:>4} |'.format(*range(8)))
print('-' * 57)

# Read form ADC and display data 

while True:
    # Read and display sensor data
    values = [0]*8
    for i in range(8):
        values[i] = mcp.read_adc(i)

        # Print the ADC values
        print('| {0:>4} | {1:>4} | {2:>4} | {3:>4} | {4:>4} | {5:>4} | {6:>4} | {7:>4} |'.format(*values))
    print('Then comes the graph')



    # Display data as a graph with gnuplot 

    p = subprocess.Popen("gnuplot -p gnuplot_script.p", shell=True)
    os.waitpid(p.pid, 0)

    print("To cloze graph window Ctrl+Q")

    # Put to sleep for chosen lenght of time

    time.sleep(FREQUENCY_SECONDS)
